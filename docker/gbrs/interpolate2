#!/usr/bin/env python

import os
import sys
import glob
import getopt
import gzip
import cPickle
import numpy as np
from collections import defaultdict
from itertools import combinations_with_replacement
from scipy.interpolate import interp1d

help_message = '''

    Usage:
        interpolate2 -i <gamma_file> -o <out_file> [ -g <grid_file> -p <gpos_file> ]
                          
    Input:
        <gamma_file> : Input file (gamma.npz GBRS output file)
        <out_file>  : Output file name (HDF5 format)
        <grid_file> : Grid file (text format)
        <gpos_file> : Gene positions (npz format)

    Parameters:
        -h, --help: shows this help message
        --eight-state: report haplotype probability (8 states) 
'''


class Usage(Exception):
    def __init__(self, msg):
        self.msg = msg


def main(argv=None):
    if argv is None:
        argv = sys.argv
    try:
        try:
            opts, args = getopt.getopt(argv[1:], "i:o:g:p:h", ["help", "eight-state"])
        except getopt.error, msg:
            raise Usage(msg)

        # Default values of vars
        infile = None
        outfile = None
        gridfile = '/data/cgd/pipeline_emase/data/mm10/R75-REL1410/hmm/marker_grid_64K.wYwMT.txt'
        gposfile = '/data/cgd/pipeline_emase/data/mm10/R75-REL1410/hmm/gene_pos.wYwMT.npz'
        in_eight_state = True

        for option, value in opts:
            if option in ("-h", "--help"):
                raise Usage(help_message)
            if option == '-i':
                infile = value
            if option == '-g':
                gridfile = value
            if option == '-p':
                gposfile = value
            if option in ('-s', '--eight-state'):
                in_eight_state = True
                print >> sys.stderr, "Haplotype probability (8-state) will be reported."
            if option == '-o':
                outfile = value

        # check all the required arguments are given
        if infile is None:
            print >> sys.stderr, "Input file (-i) is not given."
            return 2

        if outfile is None:
            print >> sys.stderr, "Output file (-o) is not given."
            return 2

        #
        # Main body
        #

        chrs = [ '%d' % c for c in range(1, 20) ]
        chrs.append('X')
        #chrs.append('Y')  # TODO: chrs should come from grid file
        #chrs.append('MT')

        haplotypes = ('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H')
        num_haplotypes = len(haplotypes)
        hid = dict(zip(haplotypes, np.arange(num_haplotypes)))
        genotypes = [ h1+h2 for h1, h2 in combinations_with_replacement(haplotypes, 2) ]
        num_genotypes = len(genotypes)

        convmat = np.zeros((36, 8))
        for g in xrange(num_genotypes):
            h1, h2 = genotypes[g]
            convmat[g, hid[h1]] += 1
            convmat[g, hid[h2]] += 1
        convmat *= 0.5

        x_grid = defaultdict(list)
        with open(gridfile) as fh:
            fh.next()
            for curline in fh:
                item = curline.rstrip().split("\t")
                x_grid[item[0]].append(float(item[1]))
        x_grid = dict(x_grid)
        gene_x = np.load(open(gposfile))
        x_mod = dict()
        for c in chrs:
            if c in gene_x.files:
                x = [ float(coord) for m, coord in gene_x[c] ]
                x_min = min(x_grid[c][0]-1.0, 0.0)
                x_max = x_grid[c][-1]+1.0
                x = np.append([x_min], x)
                x = np.append(x, [x_max])
                x_mod[c] = x

        genoprob = dict()
        gamma_gene = np.load(infile)
        gene_model_chr = {}
        gene_intrp_chr = {}
        for c in chrs:
            gamma_gene_c = gamma_gene[c].transpose()
            y = np.append([gamma_gene_c[0, :]], gamma_gene_c, axis=0)
            y = np.append(y, [y[-1, :]], axis=0)
            gene_model_chr[c] = interp1d(x_mod[c], y, axis=0)
            gene_intrp_chr[c] = gene_model_chr[c](x_grid[c])
        genoprob[os.path.basename(infile.rstrip('/'))] = gene_intrp_chr
            

        samples = sorted(genoprob.keys())
        num_samples = len(samples)

        if in_eight_state:
            gpmat_64k = np.zeros((0, 8, num_samples))
            for c in chrs:
                gpmat = np.zeros((len(x_grid[c]), 8, num_samples))
                for sid in xrange(num_samples):
                    gpmat[:, :, sid] = np.dot(genoprob[samples[sid]][c], convmat)
                gpmat_64k = np.concatenate((gpmat_64k, gpmat), axis=0)
        else:
            gpmat_64k = np.zeros((0, 36, num_samples))
            for c in chrs:
                gpmat = np.zeros((len(x_grid[c]), 36, num_samples))
                for sid in xrange(num_samples):
                    gpmat[:, :, sid] = genoprob[samples[sid]][c]
                gpmat_64k = np.concatenate((gpmat_64k, gpmat), axis=0)

        # save the genotype to CSV file
        np.savetxt(outfile, gpmat_64k[:,:,0], delimiter=",")

        #h5fh = h5py.File(outfile, 'w')
        #h5fh.attrs['samples'] = samples
        #h5fh.attrs['chromosomes'] = chrs
        #if note is not None:
        #    h5fh.attrs['note'] = note
        #cdset = h5fh.create_dataset('genoprob', data=gpmat_64k)
        #h5fh.close()

        #
        # End of main body
        #

    except Usage, err:
        print >> sys.stderr, sys.argv[0].split("/")[-1] + ": " + str(err.msg)
        return 2


if __name__ == "__main__":
    sys.exit(main())

